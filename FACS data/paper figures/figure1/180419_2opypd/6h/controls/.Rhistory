source("common_functions.R")
source("common_functions.R")
source("common_functions.R")
source("stat_functions.R")
source("common_functions.R")
source("stat_functions.R")
#source("plotting_functions.R")
t0p1_file<-"figure1/ethanol (24h)/" #180405
t1p1_file<-"figure1/glycerol(48h)/" #180515
t2p1_file<-"figure1/proline (24h)/" #180313
t6p1_file<-"figure1/sd (6h)/" # 180327
t8p1_file<-"figure1/180419_2opypd/6h" # 180327
t3p1_file<-"figure1/ethanol (24h)/controls" #180405
t4p1_file<-"figure1/glycerol(48h)/controls" #180515
t5p1_file<-"figure1/proline (24h)/controls"  #180313
t7p1_file<-"figure1/sd (6h)/controls" # 180327
t9p1_file<-"figure1/180419_2opypd/6h/controls" # 180327
pattern_read<-"Specimen_001"
output_path<-"C:/Users/aslia/Desktop/pisi/ETH/master project/labbook/paper/figures/figure1/drm_package"
# create folders named size, svf, histograms, boxplots under this directory.
starting_well<-1
wells_per_sample<-24
ypethanol_doses<-c(0,0.2,1,2,3,4,5,6,8,10,13,15,17,20,26,30,35,45,50,65,80,100,200,400)
glycerol_doses<-c(0,0.2,0.5,1,2,4,5,7,8,10,12,14,16,18,20,25,27,30,45,60,100,200,400,600)
proline_doses<-c(0,0.2,0.5,0.7,1,1.5,2,2.5,3,4,5,6,7,8,10,12,15,20,25,30,40,45,60,200)
sd_doses<- c(0,0.2,1,3,4,5,7,10,13,17,23,30,40,50,70,100,130,150,180,200,250,300,350,400)
ypd_doses<- c(0,0.5,1,3,5,8,12,15,17,21,23,25,30,35,40,50,60,75,100,150,200,300,400,600)
ypd_doses_desc<-c(0,0.5,1,3,5,8,12,15,17,21,23,25,30,35,40,50,60,75,100,150,200,300,400,600)
experiment_doses<-list(ypethanol_doses,ypethanol_doses,c(0,400),c(0,400),c(0,400),
glycerol_doses, glycerol_doses,c(0,600),c(0,600),c(0,600),
proline_doses, proline_doses,c(0,200),c(0,200),c(0,200),
sd_doses,sd_doses,c(0,400),c(0,400),c(0,400),
ypd_doses,ypd_doses,c(0,600),c(0,600),c(0,600))
experiment_doses_desc<-list(ypethanol_doses,ypethanol_doses,c(0,400),c(0,400),c(0,400),
glycerol_doses, glycerol_doses,c(0,600),c(0,600),c(0,600),
proline_doses, proline_doses,c(0,200),c(0,200),c(0,200),
sd_doses,sd_doses,c(0,400),c(0,400),c(0,400),
ypd_doses_desc,ypd_doses_desc,c(0,600),c(0,600),c(0,600))
columns_to_include<-c(2,5,3,6,7) #1=FSC-A, #2=FSC-H, #3=FSC-W, #4=SSC-A, #5=SSC-H, #6=SSC-W, #7= 488 [C]-H
strain_names<-c("2561eth","2562eth","2551eth","2683eth","70eth",
"2561gly","2562gly","2551gly","2683gly","70gly",
"2561pro","2562pro","2551pro","2683pro","70pro",
"2561sd","2562sd","2551sd","2683sd","70sd",
"2561ypd","2562ypd","2551ypd","2683ypd","70ypd"
)
time_points<-c("24h")
label_list<- c("2op NF_eth",
"2op pAct1_eth",
"fry70_eth",
"no repressor_eth",
"tdh3_eth",
"2op NF_gly",
"2op pAct1_gly",
"fry70_gly",
"no repressor_gly",
"tdh3_gly",
"2op NF_pro",
"2op pAct1_pro",
"no repressor_pro",
"tdh3_pro",
"fry70_pro",
"2op NF_sd",
"2op pAct1_sd",
"no repressor_sd",
"tdh3_sd",
"fry70_sd",
"2op NF_ypd",
"2op pAct1_ypd",
"no repressor_ypd",
"tdh3_ypd",
"fry70_ypd"
)
names(label_list)<-strain_names
xlabel<-"aTc [ng/mL]"
## pick the values to subset the data with.
columns <-c(3:6) #columns to be included in the subset
col_fscw <- 1 #column of FSC-W/H
col_sscw <- 2 #column of SSC-W/H
limit_fscw <-250000 #the value for subsetting based on FSC-W/H
limit_sscw <-250000 #the value for subsetting based on SSC-W/H
lower_limit_fscw <-25000 #the value for subsetting based on FSC-W/H, lower limit
lower_limit_sscw <-0000 #the value for subsetting based on SSC-W/H, lower limit
size_subset<-TRUE # set to TRUE if you want to use size_subsetted data, otherwise false.
dose_descriptives<-experiment_doses
cols_descriptives<-3
# read fcs files
t0p1<-f_read(t0p1_file,pattern_read)
t1p1<-f_read(t1p1_file,pattern_read)
t2p1<-f_read(t2p1_file,pattern_read)
t3p1<-f_read(t3p1_file,pattern_read)
t4p1<-f_read(t4p1_file,pattern_read)
t5p1<-f_read(t5p1_file,pattern_read)
t6p1<-f_read(t6p1_file,pattern_read)
t7p1<-f_read(t7p1_file,pattern_read)
t8p1<-f_read(t8p1_file,pattern_read)
t9p1<-f_read(t9p1_file,pattern_read)
#----------------------------------------------------------------------------------
# create the list of dataframes that contain all the data
df_list<-c(f_df_list(t0p1,starting_well,wells_per_sample,ypethanol_doses,columns_to_include),
f_df_list(t3p1,starting_well,2,c(0,400),columns_to_include),
f_df_list(t1p1,starting_well,wells_per_sample,glycerol_doses,columns_to_include),
f_df_list(t4p1,starting_well,2,c(0,200),columns_to_include),
f_df_list(t2p1,starting_well,24,proline_doses,columns_to_include),
f_df_list(t5p1,starting_well,2,c(0,200),columns_to_include),
f_df_list(t6p1,starting_well,24,sd_doses,columns_to_include),
f_df_list(t7p1,starting_well,2,c(0,400),columns_to_include),
f_df_list(t8p1,starting_well,24,ypd_doses,columns_to_include),
f_df_list(t9p1,starting_well,2,c(0,600),columns_to_include)
)
#----------------------------------------------------------------------------------
##create names for the dataframe list
df_list_names<-vector()
for (i in time_points){
name<-lapply(strain_names,f_names_df_list,i)
df_list_names<-c(df_list_names, name)
}
names(df_list)<-df_list_names
#----------------------------------------------------------------------------------
# size subsetting, if wanted
if(size_subset==TRUE){
size_subset_df<-lapply(df_list,f_size_subset,columns=columns,
col_fscw=col_fscw,col_sscw=col_sscw,limit_fscw=limit_fscw,
limit_sscw=limit_sscw, lower_limit_fscw=lower_limit_fscw,
lower_limit_sscw=lower_limit_sscw)
df_list<-size_subset_df
}
#----------------------------------------------------------------------------------
# descriptive stats
descriptives<-c(mapply(f_descriptives,df_list,experiment_doses_desc,
MoreArgs = list(column=3),SIMPLIFY = F))
#----------------------------------------------------------------------------------
# getting a value for size
df_with_size<-lapply(df_list,f_size)
t0p1<-f_read(t0p1_file,pattern_read)
source("common_functions.R")
source("stat_functions.R")
f_read<-function(working_directory, pattern){
working_directory<-paste("C:/repos/promoter/FACS data/paper figures/figure1",
working_directory,sep="")
setwd(working_directory)
flowset<-read.flowSet(pattern=pattern)
return(flowset)
}
t0p1<-f_read(t0p1_file,pattern_read)
working_directory<-paste("C:/repos/promoter/FACS data/paper figures/figure1/",
working_directory,sep="")
f_read<-function(working_directory, pattern){
working_directory<-paste("C:/repos/promoter/FACS data/paper figures/figure1/",
working_directory,sep="")
setwd(working_directory)
flowset<-read.flowSet(pattern=pattern)
return(flowset)
}
t0p1<-f_read(t0p1_file,pattern_read)
f_read<-function(working_directory, pattern){
working_directory<-paste("C:/repos/promoter/FACS data/paper figures/",
working_directory,sep="")
setwd(working_directory)
flowset<-read.flowSet(pattern=pattern)
return(flowset)
}
t0p1<-f_read(t0p1_file,pattern_read)
# read fcs files
t0p1<-f_read(t0p1_file,pattern_read)
t1p1<-f_read(t1p1_file,pattern_read)
t2p1<-f_read(t2p1_file,pattern_read)
t3p1<-f_read(t3p1_file,pattern_read)
t4p1<-f_read(t4p1_file,pattern_read)
t5p1<-f_read(t5p1_file,pattern_read)
t6p1<-f_read(t6p1_file,pattern_read)
t7p1<-f_read(t7p1_file,pattern_read)
t8p1<-f_read(t8p1_file,pattern_read)
t9p1<-f_read(t9p1_file,pattern_read)
#----------------------------------------------------------------------------------
# create the list of dataframes that contain all the data
df_list<-c(f_df_list(t0p1,starting_well,wells_per_sample,ypethanol_doses,columns_to_include),
f_df_list(t3p1,starting_well,2,c(0,400),columns_to_include),
f_df_list(t1p1,starting_well,wells_per_sample,glycerol_doses,columns_to_include),
f_df_list(t4p1,starting_well,2,c(0,200),columns_to_include),
f_df_list(t2p1,starting_well,24,proline_doses,columns_to_include),
f_df_list(t5p1,starting_well,2,c(0,200),columns_to_include),
f_df_list(t6p1,starting_well,24,sd_doses,columns_to_include),
f_df_list(t7p1,starting_well,2,c(0,400),columns_to_include),
f_df_list(t8p1,starting_well,24,ypd_doses,columns_to_include),
f_df_list(t9p1,starting_well,2,c(0,600),columns_to_include)
)
#----------------------------------------------------------------------------------
##create names for the dataframe list
df_list_names<-vector()
for (i in time_points){
name<-lapply(strain_names,f_names_df_list,i)
df_list_names<-c(df_list_names, name)
}
names(df_list)<-df_list_names
#----------------------------------------------------------------------------------
# size subsetting, if wanted
if(size_subset==TRUE){
size_subset_df<-lapply(df_list,f_size_subset,columns=columns,
col_fscw=col_fscw,col_sscw=col_sscw,limit_fscw=limit_fscw,
limit_sscw=limit_sscw, lower_limit_fscw=lower_limit_fscw,
lower_limit_sscw=lower_limit_sscw)
df_list<-size_subset_df
}
#----------------------------------------------------------------------------------
# descriptive stats
descriptives<-c(mapply(f_descriptives,df_list,experiment_doses_desc,
MoreArgs = list(column=3),SIMPLIFY = F))
#----------------------------------------------------------------------------------
# getting a value for size
df_with_size<-lapply(df_list,f_size)
str(descriptives)
descriptives<-c(mapply(f_descriptives,df_list,experiment_doses_desc,
MoreArgs = list(column=3),SIMPLIFY = F))
f_descriptives_media<-function(data_frame,dose_descriptives,column){
final_data_frame<-data.frame()
data_frame<-as.data.frame(data_frame)
for (i in dose_descriptives){
temporary<-data.frame()
m1_median<-median(data_frame[which(data_frame$"Dose"==i),column])
m2_mean<-mean(data_frame[which(data_frame$"Dose"==i),column])
qunatile1<- as.numeric(quantile(data_frame[which(data_frame$"Dose"==i),column])[2])
qunatile3<- as.numeric(quantile(data_frame[which(data_frame$"Dose"==i),column])[4])
standard_dev<- sd(data_frame[which(data_frame$"Dose"==i),column])
coef_of_dist<-(qunatile3-qunatile1)/m1_median
coef_of_variation<-(standard_dev/m2_mean)
temporary<-cbind(m1_median,m2_mean,qunatile1,qunatile3,standard_dev,coef_of_dist,
coef_of_variation,i)
final_data_frame<-rbind(final_data_frame,temporary)
}
return(final_data_frame)
}
f_descriptives<-function(data_frame,dose_descriptives,column){
final_data_frame<-data.frame()
data_frame<-as.data.frame(data_frame)
for (i in dose_descriptives){
temporary<-data.frame()
m1_median<-median(data_frame[which(data_frame$"Dose"==i),column])
m2_mean<-mean(data_frame[which(data_frame$"Dose"==i),column])
qunatile1<- as.numeric(quantile(data_frame[which(data_frame$"Dose"==i),column])[2])
qunatile3<- as.numeric(quantile(data_frame[which(data_frame$"Dose"==i),column])[4])
standard_dev<- sd(data_frame[which(data_frame$"Dose"==i),column])
coef_of_dist<-(qunatile3-qunatile1)/m1_median
coef_of_variation<-(standard_dev/m2_mean)
temporary<-cbind(m1_median,m2_mean,qunatile1,qunatile3,standard_dev,coef_of_dist,
coef_of_variation,i)
final_data_frame<-rbind(final_data_frame,temporary)
}
return(final_data_frame)
}
descriptives<-c(mapply(f_descriptives,df_list,experiment_doses_desc,
MoreArgs = list(column=3),SIMPLIFY = F))
f_sigmoid <- function(params, x) {
b<-params[[1]]
c<-params[[2]]
d<-params[[3]]
e<-params[[4]]
p1<-params[[5]]
p2<-params[[6]]
(c + (d-c)/(1+ exp((b*(log(x+1))^p1)+(e*(log(x+1))^p2)))) #fplogistic
}
f_sigmoid_fit<-function(params,x_values){
print(params)
sigmoid_fit <- f_sigmoid(params,x_values)
return(sigmoid_fit)
}
# creating the individual plots
library("minpack.lm")
library("ggthemes")
## plotting the sigmoid curves.
xlabel<-expression(paste("aTc [ng/mL]"))
f_plot_sigmoid_curves_single<-
# plot the fitted line and the individual data points.
function(fit_list,frame_list, control_frame_list,dose_control,label_list_control, xlim, ylim,strain_list,doses){
formatter<-function(x){x/1000}
final_plot<-ggplot()
# plot the lines
for (i in c(1:length(fit_list))){
print(i)
single_layer_line<- geom_line(aes_(x=x_values, y=fit_list[[i]],
colour=label_list_sigmoid[[i]]), size=1)
final_plot<-final_plot+single_layer_line
}
# plot the individual data points
for (j in c(1:length(frame_list))){
single_layer_point<- geom_point(aes_(x=frame_list[[j]][,8],y=frame_list[[j]][,1],
colour=label_list_sigmoid[[j]]))
final_plot<-final_plot+single_layer_point
}
# plot the controls
for(k in c(1:length(control_frame_list))){
frame<-control_frame_list[[k]][which(control_frame_list[[k]][,8]==dose_control),]
single_layer_control<- geom_hline(aes_(yintercept=frame[,1],
linetype=label_list_control[[k]]), colour="black",
show.legend = FALSE)
ribbon_layer_control<- geom_ribbon(aes_(ymin=frame[,1]-(frame[,6]*frame[,1]),
ymax=frame[,1]-(frame[,6]*frame[,1]),
x=x_values))
final_plot<-final_plot+single_layer_control
}
print(ylim)
pretty_plot<-final_plot +
scale_linetype_manual(values=c("longdash","dotted", "dotdash")) +
scale_colour_manual(values = colour_palette) +
scale_x_continuous(breaks = breaks_sigmoid,
labels = labels_x_axis,
limits = xlim) +
#trans = "log10") +
scale_y_continuous(limits = ylim, labels=formatter,
breaks= ylim_breaks_sigmoid) +
guides(colour=guide_legend(nrow=2)) +
# ggtitle(plot_title) +
xlab(xlabel) +
ylab(expression(paste("Fluorescence x","10"^"3","(a.u.)",sep=""))) +
theme(panel.grid.minor = element_blank(),
legend.direction = "vertical",
legend.position = c(0.8,0.3),
legend.title = element_blank(),
legend.key.height = unit(0.35,"cm"),
legend.key = element_blank(),
legend.box.background = element_rect(linetype = "solid", colour="black"),
legend.margin = margin(t=0.04,r=0.1,b=0.1,l=0.1,unit="cm"),
panel.border = element_blank(),
axis.line = element_line(),
# axis.text = element_text(size=24),
# axis.title = element_text(size=24),
axis.title = element_text(hjust = 1),
panel.background = element_blank()
)
# geom_rangeframe(aes(x=c(min(x_values):max(x_values)),
#                     y=seq(0,50,length.out=length(c(min(x_values):max(x_values))))),sides = "lb")
return(pretty_plot)
}
library(drc)
list_p1<-list(-0.6,-0.5)
list_p2<-list(3,0.5)
list_formulas<-list()
for(i in c(1:length(list_p1))){
formula<- fplogistic(p1=list_p1[[i]],p2=list_p2[[i]])
list_formulas[[i]]<-formula
}
f_fit_function<-function(x) (c + (d-c)/(1+ exp((b*(log(x+1))^p1)+(e*(log(x+1))^p2)))) #fplogistic function
#--------------------------------------------------------------------------------------
descriptives_to_use<-c(21,22)
control_descriptives_to_use<-c(23,24,25)
labels_to_use<-c(21,22)
dose_control<-"600"
xlim<-c(0,150)
ylim<-c(0,50000)
ylim_breaks_sigmoid<-seq(0,50000,length.out = 6)
colour_palette<-c("darkred","grey50","grey20","grey50","grey80")
# pick which strains/time_points you want to plot, and their labels
frame_list<-descriptives[descriptives_to_use]
label_list_sigmoid<-c("NF","OL")
label_list_control<-label_list[control_descriptives_to_use]
control_frame_error<-df_list[control_descriptives_to_use]
# pick your controls
control_frame_list<-descriptives[control_descriptives_to_use]
# for(i in c(2,3)){
#   control_frame_list[[i]][,1]<-control_frame_list[[i]][,1]
# }
#define x axis doses and the labels for plotting
breaks_sigmoid<-c(0,20,60,100,150)
labels_x_axis<- breaks_sigmoid
# # replace 0 values in the doses with 0.1
# for(i in c(1:length(frame_list))){
#   frame_list[[i]][1,8]<-0.19
# }
# generate log distributed x values for smoother line fitting.
library(emdbook)
x_values<-seq(min(frame_list[[1]][,8]),
max(frame_list[[1]][,8]),length.out=10000)
strain_list<-c("NF","OL")
new_frame_list<-list()
for(i in c(1:length(frame_list))){
new_frame<-frame_list[[i]][c(1,8)]
#new_frame[,2]<-log10(new_frame[,2])
new_frame_list[[i]]<-new_frame
} # creates the dataframes that the drm function can take as input (y values in first column, doses/x values in second column)
drm_model<-mapply(drm,data=new_frame_list,fct=list_formulas, MoreArgs = list(logDose=NULL
), SIMPLIFY = F) # the lower bound for the second
