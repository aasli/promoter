ec10_yvalue<-fit_list[[l]][as.integer(ec10_xvalue)]
ec50<-round(ec_list[[l]][2],2)
ec50_xvalue<-mean(which(round(x_values,2)==ec50))
ec50_yvalue<-fit_list[[l]][as.integer(ec50_xvalue)]
ec90<-round(ec_list[[l]][3],1)
ec90_xvalue<-mean(which(round(x_values,1)==ec90))
ec90_yvalue<-fit_list[[l]][as.integer(ec90_xvalue)]
print(ec90)
print(ec90_xvalue)
print(ec90_yvalue)
ec10_layer<-geom_point(aes_(x=ec10,
y=ec10_yvalue,
colour="EC10"))
ec50_layer<-geom_point(aes_(x=ec50,
y=ec50_yvalue,
colour="EC50"))
ec90_layer<-geom_point(aes_(x=ec90,
y=ec90_yvalue,
colour="EC90"))
final_plot<-final_plot + ec10_layer + ec50_layer + ec90_layer
}
pretty_plot<-final_plot +
scale_colour_manual(values = colour_palette) +
scale_x_log10(breaks = breaks_sigmoid,
labels = labels_x_axis) +
guides(colour=guide_legend(title = "Strains",nrow=2)) +
#scale_y_log10() +
ggtitle(plot_title) +
xlab(xlabel) +
ylab("Fluorescence (a.u.)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.direction = "horizontal", legend.position = "bottom") +
expand_limits(x=0.3)
return(pretty_plot)
}
x_values_plotting<-c(min(frame_list[[1]][,8],x_values[c(2:length(x_values))])
# apply the fitting to each frame with its own individual starting points.
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
ec_list_descriptives<-lapply(parameters,f_ecs)
# plot the fitted lines and the individual data points
sigmoid_plot<-f_plot_sigmoid_curves(sigmoid_fit_descriptives,frame_list, control_list,
control_list_sigmoid, ec_list_descriptives)
f_save(sigmoid_plot,paste("sigmoid_fit_weighted_5pr_nc.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
#----------------------------------------------------------------------------------
# plot derivative of the sigmoid_fit
x_values_d<-seq(0,
max(frame_list[[1]][,8]),length.out=10000)
sigmoid_d_fit<-lapply(parameters,f_d_sigmoid_fit,x_values_d)
f_derivative_plot<-f_plot_sigmoid_d(x_values_d, sigmoid_d_fit, c("NF","pAct1"))
which(sigmoid_d_fit[[2]]<0.25)
f_save(f_derivative_plot,paste("derivative_sigmoid.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
#----------------------------------------------------------------------------------
## QQplots
df_normalized_list<-lapply(df_list,f_normalize,column=3)
x_values_plotting<-c(min(frame_list[[1]][,8],x_values[c(2:length(x_values))]))
# apply the fitting to each frame with its own individual starting points.
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
ec_list_descriptives<-lapply(parameters,f_ecs)
# plot the fitted lines and the individual data points
sigmoid_plot<-f_plot_sigmoid_curves(sigmoid_fit_descriptives,frame_list, control_list,
control_list_sigmoid, ec_list_descriptives)
sigmoid_plot
str(x_values_plotting)
x_values_plotting<-c(min(frame_list[[1]][,8]),x_values[c(2:length(x_values))])
# apply the fitting to each frame with its own individual starting points.
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
ec_list_descriptives<-lapply(parameters,f_ecs)
# plot the fitted lines and the individual data points
sigmoid_plot<-f_plot_sigmoid_curves(sigmoid_fit_descriptives,frame_list, control_list,
control_list_sigmoid, ec_list_descriptives)
sigmoid_plot
x_values_d<-seq(0,
max(frame_list[[1]][,8]),length.out=10000)
sigmoid_d_fit<-lapply(parameters,f_d_sigmoid_fit,x_values_d)
f_derivative_plot<-f_plot_sigmoid_d(x_values_d, sigmoid_d_fit, c("NF","pAct1"))
which(sigmoid_d_fit[[2]]<0.25)
f_save(f_derivative_plot,paste("derivative_sigmoid.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
f_derivative_plot
f_save(sigmoid_plot,paste("sigmoid_fit_weighted_5pr_nc.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
source("common_functions.R")
source("stat_functions.R")
source("plotting_functions.R")
## colour scale
## colour scale
plot_palette<-c(
"0"="#867236",
"0.2"="#6343c6",
"1"="#addf42",
"3"="#bf4dd6",
"4"="#63d654",
"5"="#d148a3",
"7"="#d7ca3b",
"10"="#6e74cc",
"13"="#5c8f38",
"17"="#77397a",
"23"="#74dc9e",
"30"="#cf466b",
"40"="#76d5d7",
"50"="#de4e34",
"70"="#8cadd1",
"100"="#d6913d",
"130"="#4b5e7d",
"150"="#cad17b",
"180"="#d292c6",
"200"="#435738",
"250"="#98432a",
"300"="#5b957b",
"350"="#7c4a51",
"400"="#ccccb0",
"fry70"="black",
"no repressor"="black",
"tdh3"="blue")
# reading fcs files, t0p1 is the folder for timepoint 0, plate 1 etc.
t0p1_file<-"180327_2opypdsd/2op_p1/sd"
t1p1_file<-"180327_2opypdsd/2op_p1/sd/controls"
pattern_read<-"Specimen_001"
output_path<-"C:/Users/aslia/Desktop/pisi/ETH/master project/labbook/plots/march18/180327_2opypdsd/sd" # for saving plots
xlabel<-expression(paste("aTc[ng/mL]", sep = ""))
starting_well<-1
wells_per_sample<-24
experiment_doses<-c(0,0.2,1,3,4,5,7,10,13,17,23,30,40,50,70,100,130,150,180,200,250,300,350,400)
columns_to_include<-c(3,6,7) #1=FSC-A, #2=FSC-H, #3=FSC-W, #4=SSC-A, #5=SSC-H, #6=SSC-W, #7= 488 [C]-H
strain_names<-c("2561","2562","2551","2683","70")
time_points<-c("24h")
label_list<- c("2op, NF",
"2op, pAct1",
"no repressor",
"pTDH3_citrine",
"fry70"
)
names(label_list)<-strain_names
#---------------------------------------------------------------------------------------------------------------
## pick the values to subset the data with.
columns <-c(1:4) #columns to be included in the subset
col_fscw <- 1 #column of FSC-W/H
col_sscw <- 2 #column of SSC-W/H
limit_fscw <-72000 #the value for subsetting based on FSC-W/H
limit_sscw <-100000 #the value for subsetting based on SSC-W/H
lower_limit_fscw <-68000 #the value for subsetting based on FSC-W/H, lower limit
lower_limit_sscw <-40000 #the value for subsetting based on SSC-W/H, lower limit
size_subset<-FALSE # set to TRUE if you want to use size_subsetted data, otherwise false.
#---------------------------------------------------------------------------------------------------------------
## descriptive statistics
dose_descriptives<-experiment_doses
cols_descriptives<-3
#---------------------------------------------------------------------------------------------------------------
## smoothed dose response curves of the strains you want
descriptive_sequence<-c(1:2) #pick the strains at given timepoints
label_list_smooth<-label_list[c(1:2)]
timepoint_used<-1
number_of_timepoints<-1
ncol_legend_smooth<-2
statistic_to_use<-1 #1 is median, 2 is mean
scale_x_breaks_smooth<-experiment_doses
scale_x_labels_smooth<-experiment_doses
legend_title_smooth<-"Strain"
plot_title_smooth<-"Dose Response Curves, 6h"
xlab_smooth<-xlabel
ylab_smooth<-"Fluorescence (a.u.)"
legend_direction_smooth<-"vertical"
legend_position_smooth<-c(0.8,0.2)
additional_arguments_smooth<-NULL
time_point_smooth<-"6h" # to be used in the filename when saving the plot.
height_smooth<-10 # the height and width of the plot to be saved
width_smooth<-15
#---------------------------------------------------------------------------------------------------------------
## size plots
fscw_column_size<-1
sscw_column_size<-2
xlab_size<-"FSC-W"
ylab_size<-"SSC-W"
ylimits_size<-c(40000,NA)
xlimits_size<-c(40000,NA)
labels_for_grid_size<-time_points # labels for the plots in the 2x2 grid
height_size<-10 # saving dimensions
width_size<-15
#---------------------------------------------------------------------------------------------------------------
## histograms
doses_histogram<-experiment_doses # the doses you want to plot. if you change this, you should change the manual colour scale inside the function as well.
labels_histogram<-c("0","0.2","0.5","0.7","1","1.5","2","2.5","3","4","5","6","7","8","10",
"12","15","20","25","30","40","45","60","200","fry70","tdh3",
"no repressor")
breaks_histogram<-labels_histogram
dose_column<-4 #the column with doses
citrine_column<-3 # column with citrine measurement
control_sequence<-c(3,4,5)
control_labels<-c("fry70","no repressor","tdh3")
size_histogram<- 1.3 # size of the lines
legend_title_histogram<-xlabel
legend_ncol_histogram<-2
legend_position_histogram<-c(0.7,0.8)
xlimits_histogram<-c(0,60000)
ylimits_histogram<-c(0,0.0005)
grid_labels_histograms<-time_points # labels for the plots in the 2x2 grid
height_histograms<-10 # saving dimensions
width_histograms<-15
#---------------------------------------------------------------------------------------------------------------
## descriptive plots
palette<-c("24h"="purple")
colour_labels<-time_points
scale_x_breaks<-experiment_doses
ylab_title<-"Fluorescence (a.u.)"
xlab_title<-xlabel
legend_title<-"Time Point"
stat_columns_1<-c(1,6)
stat_columns_2<-c(2,7)
size_value_descriptives<-4
height_descriptives<-10
width_descriptives<-15
#----------------------------------------------------------------------------------------------------------
## sigmoid fits
descriptives_to_use_sigmoid<-c(1,2)
labels_to_use<-c(1,2)
colour_palette<-c("red","blue", "orange","green","black") # define the colour palette for plotting
# define the plot title, xlabel
plot_title<-"Dose Response Curves, 24"
xlabel<-expression(paste("aTc[ng/mL]"))
# pick controls for the plot
controls_to_use_sigmoid<-c(3,4,5)
# define starting points for the fitting for each curve: c(a,b,c,d)
# a is the upper asymptote, b is the steepest slope, c is the x axis value at b, e is the lower
# asymptote. you can define these individually for every curve.
# d is the symmetry parameter. if =1, the curve is symmetrical around EC50.
# a negative b gives you an inverse sigmoid, a positive one gives you a sigmoid. or does it?
list_of_starting_points<-list(
c(40000,0.5,5,0.4,5000),
c(40000,0.01,1,7,5000)
)
time_point_sigmoid<-"24h"
height_sigmoid<-10
width_sigmoid<-15
#----------------------------------------------------------------------------------------------------------
## size vs. induction plots
palette_density<-plot_palette
x_breaks_density<-labels_histogram
legend_title_density<-xlabel
ncol_legend_density<-2
legend_position_density<-c(0.15,0.68)
size_column<-5
citrine_column<-3
dose_column<-4
doses_size_vs_induction<-experiment_doses # the doses you want to plot. if you change this, you should change the manual colour scale inside the function as well.
labels_size_vs_induction<-labels_histogram  #labels that will appear on the legend, and that determine the colour_scale_manual mappings. If you change anything here, change it in the colour scale inside the function as well.
grid_labels_density<-time_points
height_density<-10
width_density<-15
#---------------------------------------------------------------------------------------------------------------
t0p1<-f_read(t0p1_file,pattern_read)
t1p1<-f_read(t1p1_file,pattern_read)
#----------------------------------------------------------------------------------
# create the list of dataframes that contain all the data
df_list<-c(f_df_list(t0p1,starting_well,wells_per_sample,experiment_doses,columns_to_include),
f_df_list(t1p1,starting_well,2,c(0,200),columns_to_include))
#----------------------------------------------------------------------------------
##create names for the dataframe list
df_list_names<-vector()
for (i in time_points){
name<-lapply(strain_names,f_names_df_list,i)
df_list_names<-c(df_list_names, name)
}
names(df_list)<-df_list_names
descriptives<-c(lapply(df_list,f_descriptives,column=cols_descriptives))
library("minpack.lm")
# pick which strains/time_points you want to plot, and their labels
frame_list<-descriptives[descriptives_to_use_sigmoid]
label_list_sigmoid<-label_list[labels_to_use]
#define x axis doses and the labels for plotting
doses_experiment<-frame_list[[1]][,8]
breaks_sigmoid<-c(0.1,doses_experiment[c(2:length(doses_experiment))])
labels_x_axis<-c(0,frame_list[[1]][c(2:nrow(frame_list[[1]])),8])
# replace 0 values in the doses with 0.1
for(i in c(1:length(frame_list))){
frame_list[[i]][1,8]<-0.1
}
# define the controls for putting on the plot
control_list<-descriptives[controls_to_use_sigmoid]
control_list_sigmoid<-label_list[controls_to_use_sigmoid]
# generate log distributed x values for smoother line fitting.
library(emdbook)
x_values<-c(0,lseq(min(frame_list[[1]][,8]),
max(frame_list[[1]][,8]),1000))
x_values_plotting<-c(min(frame_list[[1]][,8]),x_values[c(2:length(x_values))])
# apply the fitting to each frame with its own individual starting points.
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
ec_list_descriptives<-lapply(parameters,f_ecs)
# plot the fitted lines and the individual data points
sigmoid_plot<-f_plot_sigmoid_curves(sigmoid_fit_descriptives,frame_list, control_list,
control_list_sigmoid, ec_list_descriptives)
f_save(sigmoid_plot,paste("sigmoid_fit_weighted_5pr_nc.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
#----------------------------------------------------------------------------------
# plot derivative of the sigmoid_fit
x_values_d<-seq(0,
max(frame_list[[1]][,8]),length.out=10000)
sigmoid_d_fit<-lapply(parameters,f_d_sigmoid_fit,x_values_d)
f_derivative_plot<-f_plot_sigmoid_d(x_values_d, sigmoid_d_fit, c("NF","pAct1"))
which(sigmoid_d_fit[[2]]<0.25)
f_save(f_derivative_plot,paste("derivative_sigmoid.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
#-------------------------------------------------------
## sigmoid curve fitting
## plotting
function_curve_fitting<-
# this function fits a sigmoid curve to the datapoints.
# a is the upper asymptote, b is the steepest slope, c is the x axis value at b, d is the lower
# asymptote. you can define these individually for every curve.
# a negative b gives you an inverse sigmoid, a positive one gives you a sigmoid.
# the function creates a list of fitted values, one for each "frame" input.
function(frame,list_of_starting_points){
x = frame[,8]
y = frame[,1]
a<-list_of_starting_points[[1]]
b<-list_of_starting_points[[2]]
c<-list_of_starting_points[[3]]
d<-list_of_starting_points[[4]]
e<-list_of_starting_points[[5]]
# fitting
fitmodel <- nlsLM(y ~  ( e+ (a-e)/((1 + ((x/c)^b))^(d))), start=list(a=a,b=b,c=c, d=d,e=e),
weights = (1/(frame[,5])), control = list(maxiter=1000))
# get the coefficients
params=coef(fitmodel)
return(params)
}
f_ecs<-function(params){
# calculate ec50, ec90 and ec10
ec50<-params[3]*(((2^(1/params[4]))-1))^(1/params[2])
ec90<-params[3]*((((100/90)^(1/params[4]))-1))^(1/params[2])
ec10<-params[3]*((((10)^(1/params[4]))-1))^(1/params[2])
ec_list<-c(ec10,ec50,ec90)
print(ec_list)
return(ec_list)
}
f_sigmoid <- function(params, x) {
( params[5] + ((params[1]-params[5]) / ((1 + ((x/params[3])^params[2]))^
(params[4]))))
}
f_sigmoid_fit<-function(params,x_values){
sigmoid_fit <- f_sigmoid(params,x_values)
print(params)
return(sigmoid_fit)
}
## plotting the sigmoid curves.
f_plot_sigmoid_curves<-
# plot the fitted line and the individual data points.
function(fit_list,frame_list, control_list,control_list_sigmoid, ec_list){
final_plot<-ggplot()
# plot the lines
for (i in c(1:length(fit_list))){
single_layer_line<- geom_line(aes_(x=x_values_plotting, y=fit_list[[i]],
colour=label_list_sigmoid[[i]]),size=1)
final_plot<-final_plot+single_layer_line
}
# plot the individual data points
for (j in c(1:length(frame_list))){
single_layer_point<- geom_point(aes_(x=frame_list[[j]][,8],y=frame_list[[j]][,1],
colour=label_list_sigmoid[[j]]))
final_plot<-final_plot+single_layer_point
}
# # plot controls
# for (k in c(1:length(control_list))){
#   single_layer_line<- geom_line(aes_(x=control_list[[k]][,8][c(1,24)],
#                                      y=control_list[[k]][,1][c(1,24)],
#                                        colour=control_list_sigmoid[[k]]))
#   final_plot<-final_plot+single_layer_line
# }
for(l in c(1:length(ec_list))){
ec10<-round(ec_list[[l]][1],2)
ec10_xvalue<-mean(which(round(x_values,2)==ec10))
ec10_yvalue<-fit_list[[l]][as.integer(ec10_xvalue)]
ec50<-round(ec_list[[l]][2],2)
ec50_xvalue<-mean(which(round(x_values,2)==ec50))
ec50_yvalue<-fit_list[[l]][as.integer(ec50_xvalue)]
ec90<-round(ec_list[[l]][3],1)
ec90_xvalue<-mean(which(round(x_values,1)==ec90))
ec90_yvalue<-fit_list[[l]][as.integer(ec90_xvalue)]
print(ec90)
print(ec90_xvalue)
print(ec90_yvalue)
ec10_layer<-geom_point(aes_(x=ec10,
y=ec10_yvalue,
colour="EC10"))
ec50_layer<-geom_point(aes_(x=ec50,
y=ec50_yvalue,
colour="EC50"))
ec90_layer<-geom_point(aes_(x=ec90,
y=ec90_yvalue,
colour="EC90"))
final_plot<-final_plot + ec10_layer + ec50_layer + ec90_layer
}
pretty_plot<-final_plot +
scale_colour_manual(values = colour_palette) +
scale_x_log10(breaks = breaks_sigmoid,
labels = labels_x_axis) +
guides(colour=guide_legend(title = "Strains",nrow=2)) +
#scale_y_log10() +
ggtitle(plot_title) +
xlab(xlabel) +
ylab("Fluorescence (a.u.)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.direction = "horizontal", legend.position = "bottom") +
expand_limits(x=0.3)
return(pretty_plot)
}
#----------------------------------------------------------------------------------------
## plot derivative of the sigmoid fit
f_fit_function<-function(x) (e + (a-e)/((1 + ((((x/c)^b))^(d)))))
d_fit_function<-D(body(f_fit_function),'x')
f_d_sigmoid <- function(params, x) {
-((params[1] - params[5]) * ((1 + ((x/params[3])^params[2]))^((params[4]) - 1) *
((params[4]) * ((x/params[3])^(params[2] - 1) *
(params[2] * (1/params[3])))))/((1 +
((x/params[3])^params[2]))^
(params[4]))^2)
}
f_d_sigmoid_fit<-function(params,x_values_d){
sigmoid_fit <- f_d_sigmoid(params,x_values_d)
return(sigmoid_fit)
}
f_plot_sigmoid_d<-function(x_values_d, y_values, label_list){
final_plot<- ggplot()
for(i in c(1:length(y_values))){
single_layer<-geom_line(aes_(x=x_values_d,y=y_values[[i]], colour=label_list[[i]]))
final_plot<-final_plot+single_layer
}
pretty_plot<-final_plot +
theme_bw() +
theme(legend.position = c(0.8,0.8)) +
guides(colour=guide_legend(title = "Strain")) +
ylab("D of Sigmoid Fit") +
xlab("Dose") +
scale_color_manual(values = c("red","blue"))
return(pretty_plot)
}
#----------------------------------------------------------------------------------------
## QQplots
f_qqplot<-function(dataframe1, dataframe2,column1,column2, xlims, ylims, title, label_1,
label_2){
plot_values<-as.data.frame(qqplot(x=dataframe1[,column1],
y=dataframe2[,column2], plot.it=FALSE))
qqplot<-ggplot(plot_values) +
geom_point(aes(x=x,y=y)) +
xlab(colnames(dataframe1)[column1]) +
ylab(colnames(dataframe1)[column2]) +
geom_abline(aes(slope=1,intercept=0)) +
theme_bw() +
xlim(xlims) +
ylim(ylims) +
ggtitle(title)
return(qqplot)
}
library("minpack.lm")
# pick which strains/time_points you want to plot, and their labels
frame_list<-descriptives[descriptives_to_use_sigmoid]
label_list_sigmoid<-label_list[labels_to_use]
#define x axis doses and the labels for plotting
doses_experiment<-frame_list[[1]][,8]
breaks_sigmoid<-c(0.1,doses_experiment[c(2:length(doses_experiment))])
labels_x_axis<-c(0,frame_list[[1]][c(2:nrow(frame_list[[1]])),8])
# replace 0 values in the doses with 0.1
for(i in c(1:length(frame_list))){
frame_list[[i]][1,8]<-0.1
}
# define the controls for putting on the plot
control_list<-descriptives[controls_to_use_sigmoid]
control_list_sigmoid<-label_list[controls_to_use_sigmoid]
# generate log distributed x values for smoother line fitting.
library(emdbook)
x_values<-c(0,lseq(min(frame_list[[1]][,8]),
max(frame_list[[1]][,8]),1000))
x_values_plotting<-c(min(frame_list[[1]][,8]),x_values[c(2:length(x_values))])
# apply the fitting to each frame with its own individual starting points.
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
ec_list_descriptives<-lapply(parameters,f_ecs)
# plot the fitted lines and the individual data points
sigmoid_plot<-f_plot_sigmoid_curves(sigmoid_fit_descriptives,frame_list, control_list,
control_list_sigmoid, ec_list_descriptives)
f_save(sigmoid_plot,paste("sigmoid_fit_weighted_5pr_nc.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
#----------------------------------------------------------------------------------
# plot derivative of the sigmoid_fit
x_values_d<-seq(0,
max(frame_list[[1]][,8]),length.out=10000)
sigmoid_d_fit<-lapply(parameters,f_d_sigmoid_fit,x_values_d)
f_derivative_plot<-f_plot_sigmoid_d(x_values_d, sigmoid_d_fit, c("NF","pAct1"))
which(sigmoid_d_fit[[2]]<0.25)
f_save(f_derivative_plot,paste("derivative_sigmoid.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
#-------------------------------------------------------
