source("common_functions.R")
source("stat_functions.R")
source("plotting_functions.R")
## colour scale
## colour scale
plot_palette<-c(
"0"="#867236",
"0.2"="#ccccb0",
"0.5"="#6343c6",
"0.7"="#addf42",
"1"="#bf4dd6",
"1.5"="#63d654",
"2"="#d148a3",
"2.5"="#d7ca3b",
"3"="#6e74cc",
"4"="#5c8f38",
"6"="#77397a",
"8"="#74dc9e",
"10"="#cf466b",
"12"="#76d5d7",
"15"="#de4e34",
"20"="#8cadd1",
"25"="#d6913d",
"30"="#4b5e7d",
"40"="#cad17b",
"45"="#d292c6",
"60"="#435738",
"200"="#98432a",
"400"="#5b957b",
"600"="#7c4a51",
"fry70"="black",
"no repressor"="black",
"tdh3"="blue")
# reading fcs files, t0p1 is the folder for timepoint 0, plate 1 etc.
t1p1_file<-"180504_media/21h"
t1p2_file<-"180504_media/21h/controls"
t2p1_file<-"180504_media/26h"
t2p2_file<-"180504_media/26h/controls"
pattern_read<-"Specimen_001"
output_path<-"C:/Users/aslia/Desktop/pisi/ETH/master project/labbook/plots/may18/180504_7opproline" # for saving plots
xlabel<-expression(paste("aTc[ng/mL]", sep = ""))
starting_well<-1
wells_per_sample<-24
experiment_doses<-  c(0,0.2,0.5,0.7,1,1.5,2,2.5,3,4,6,8,10,12,15,20,25,30,40,45,60,200,400,600)
columns_to_include<-c(2,5,7) #1=FSC-A, #2=FSC-H, #3=FSC-W, #4=SSC-A, #5=SSC-H, #6=SSC-W, #7= 488 [C]-H
strain_names<-c("2759","2661","2683","70")
time_points<-c("21h","26h")
label_list<- c("7op final, NF",
"no repressor",
"pTDH3_citrine",
"fry70"
)
names(label_list)<-strain_names
#---------------------------------------------------------------------------------------------------------------
## pick the values to subset the data with.
columns <-c(1:4) #columns to be included in the subset
col_fscw <- 1 #column of FSC-W/H
col_sscw <- 2 #column of SSC-W/H
limit_fscw <-90000 #the value for subsetting based on FSC-W/H
limit_sscw <-90000 #the value for subsetting based on SSC-W/H
lower_limit_fscw <-000 #the value for subsetting based on FSC-W/H, lower limit
lower_limit_sscw <-0000 #the value for subsetting based on SSC-W/H, lower limit
size_subset<-FALSE # set to TRUE if you want to use size_subsetted data, otherwise false.
#---------------------------------------------------------------------------------------------------------------
## descriptive statistics
dose_descriptives<-experiment_doses
cols_descriptives<-3
#---------------------------------------------------------------------------------------------------------------
## smoothed dose response curves of the strains you want
descriptive_sequence<-c(1,5) #pick the strains at given timepoints
label_list_smooth<-label_list[c(1,1)]
timepoint_used<-1
number_of_timepoints<-1
ncol_legend_smooth<-2
statistic_to_use<-2 #1 is median, 2 is mean
scale_x_breaks_smooth<-experiment_doses
scale_x_labels_smooth<-experiment_doses
legend_title_smooth<-"Strain"
plot_title_smooth<-"Dose Response Curves, 21h"
xlab_smooth<-xlabel
ylab_smooth<-"Fluorescence (a.u.)"
legend_direction_smooth<-"vertical"
legend_position_smooth<-c(0.8,0.2)
additional_arguments_smooth<-NULL
time_point_smooth<-"6h" # to be used in the filename when saving the plot.
height_smooth<-10 # the height and width of the plot to be saved
width_smooth<-15
#---------------------------------------------------------------------------------------------------------------
## size plots
fscw_column_size<-1
sscw_column_size<-2
xlab_size<-"FSC-W"
ylab_size<-"SSC-W"
ylimits_size<-c(000,NA)
xlimits_size<-c(000,NA)
labels_for_grid_size<-time_points # labels for the plots in the 2x2 grid
height_size<-10 # saving dimensions
width_size<-15
#---------------------------------------------------------------------------------------------------------------
## histograms
dfs_to_histogram<-c(1,5)
doses_histogram<-experiment_doses # the doses you want to plot. if you change this, you should change the manual colour scale inside the function as well.
labels_histogram<-c(0,0.2,0.5,0.7,1,1.5,2,2.5,3,4,6,8,10,12,15,20,25,30,40,45,60,200,400,600,
"fry70","tdh3","no repressor")
breaks_histogram<-labels_histogram
dose_column<-4 #the column with doses
citrine_column<-3 # column with citrine measurement
control_sequence<-c(3,4,5)
control_labels<-c("no repressor","tdh3","fry70")
size_histogram<- 1.3 # size of the lines
legend_title_histogram<-xlabel
legend_ncol_histogram<-2
legend_position_histogram<-c(0.7,0.8)
xlimits_histogram<-c(0,60000)
ylimits_histogram<-c(0,0.0005)
grid_labels_histograms<-time_points # labels for the plots in the 2x2 grid
height_histograms<-10 # saving dimensions
width_histograms<-15
names_individual_histograms<-c("histogram_gridNF.jpeg","histogram_gridAct1.jpeg") # names for saving the plots
x_limits_individual_histogram<-c(0,50000)
x_breaks_individual_histogram<-c(0,9000,25000,50000)
y_breaks_individual_histogram<-c(0,0.0001,0.0002)
y_limits_individual_histogram<-c(0,0.0001)
#---------------------------------------------------------------------------------------------------------------
## descriptive plots
palette<-c("21h"="purple")
colour_labels<-time_points
scale_x_breaks<-experiment_doses
ylab_title<-"Fluorescence (a.u.)"
xlab_title<-xlabel
legend_title<-"Time Point"
stat_columns_1<-c(1,6)
stat_columns_2<-c(2,7)
size_value_descriptives<-4
height_descriptives<-10
width_descriptives<-15
#----------------------------------------------------------------------------------------------------------
## sigmoid fits
descriptives_to_use_sigmoid<-c(1,5)
labels_to_use<-c(1)
colour_palette<-c("red","blue", "orange","green","black") # define the colour palette for plotting
# define the plot title, xlabel
plot_title<-"Dose Response Curves, 21h"
xlabel<-expression(paste("aTc[ng/mL]"))
# pick controls for the plot
controls_to_use_sigmoid<-c(3,4,5)
# define starting points for the fitting for each curve: c(a,b,c,d)
# a is the upper asymptote, b is the steepest slope, c is the x axis value at b, e is the lower
# asymptote. you can define these individually for every curve.
# d is the symmetry parameter. if =1, the curve is symmetrical around EC50.
# a negative b gives you an inverse sigmoid, a positive one gives you a sigmoid. or does it?
list_of_starting_points<-list(
c(50000,0.8,210,1,300),
c(50000,0.8,210,1,300)
)
time_point_sigmoid<-"21h"
height_sigmoid<-10
width_sigmoid<-15
## derivative of sigmoid fit
label_list_derivative<-c("NF21h","NF26h")
#----------------------------------------------------------------------------------------------------------
## size vs. induction plots
palette_density<-plot_palette
x_breaks_density<-labels_histogram
legend_title_density<-xlabel
ncol_legend_density<-2
legend_position_density<-c(0.15,0.68)
size_column<-5
citrine_column<-3
dose_column<-4
doses_size_vs_induction<-experiment_doses # the doses you want to plot. if you change this, you should change the manual colour scale inside the function as well.
labels_size_vs_induction<-labels_histogram  #labels that will appear on the legend, and that determine the colour_scale_manual mappings. If you change anything here, change it in the colour scale inside the function as well.
grid_labels_density<-time_points
height_density<-10
width_density<-15
#----------------------------------------------------------------------------------------------------------## QQPLOTS
# in the dataframelist1/2, pick the strain you want to plot. in the doses part, you can specify which
# dose is to be plotted. in columns, pick which column is to be plotted. dataframelist1 and 2 will be paired in each qqplot (i.e. dataframelist1[1] is plotted against dataframelist2[[1]])
dataframelist1<-c(1,1,1)
dataframelist1_doses<-c(0,200,400)
dataframelist1_columns<-c(3,3,3)
dataframelist2<-c(2,2,2)
dataframelist2_doses<-c(0,200,400)
dataframelist2_columns<-c(3,3,3)
xlims_qqplot<-list(c(0,NA),c(0,NA),c(0,NA))
ylims_qqplot<-list(c(0,NA),c(0,NA),c(0,NA))
titles_qqplot<-c("NF vs pAct1,0atc",
"NF vs pAct1,200atc",
"NF vs pAct1,400atc"
)
width_qq<-15
height_qq<-10
# read fcs files
t1p1<-f_read(t0p1_file,pattern_read)
t1p2<-f_read(t1p1_file,pattern_read)
t2p1<-f_read(t0p1_file,pattern_read)
t2p2<-f_read(t1p1_file,pattern_read)
#----------------------------------------------------------------------------------
# create the list of dataframes that contain all the data
df_list<-c(f_df_list(t1p1,starting_well,wells_per_sample,experiment_doses,columns_to_include),
f_df_list(t1p2,starting_well,2,c(0,600),columns_to_include),
f_df_list(t2p1,starting_well,wells_per_sample,experiment_doses,columns_to_include),
f_df_list(t2p2,starting_well,2,c(0,600),columns_to_include)
)
t1p1_file<-"180504_media/proline21h"
t1p2_file<-"180504_media/proline21h/controls"
t2p1_file<-"180504_media/proline26h"
t2p2_file<-"180504_media/proline26h/controls"
# read fcs files
t1p1<-f_read(t0p1_file,pattern_read)
t1p2<-f_read(t1p1_file,pattern_read)
t2p1<-f_read(t0p1_file,pattern_read)
t2p2<-f_read(t1p1_file,pattern_read)
#----------------------------------------------------------------------------------
# create the list of dataframes that contain all the data
df_list<-c(f_df_list(t1p1,starting_well,wells_per_sample,experiment_doses,columns_to_include),
f_df_list(t1p2,starting_well,2,c(0,600),columns_to_include),
f_df_list(t2p1,starting_well,wells_per_sample,experiment_doses,columns_to_include),
f_df_list(t2p2,starting_well,2,c(0,600),columns_to_include)
)
t1p1<-f_read(t0p1_file,pattern_read)
t1p1<-f_read(t1p1_file,pattern_read)
t1p2<-f_read(t1p2_file,pattern_read)
t2p1<-f_read(t2p1_file,pattern_read)
t2p2<-f_read(t2p2_file,pattern_read)
df_list<-c(f_df_list(t1p1,starting_well,wells_per_sample,experiment_doses,columns_to_include),
f_df_list(t1p2,starting_well,2,c(0,600),columns_to_include),
f_df_list(t2p1,starting_well,wells_per_sample,experiment_doses,columns_to_include),
f_df_list(t2p2,starting_well,2,c(0,600),columns_to_include)
)
#----------------------------------------------------------------------------------
##create names for the dataframe list
df_list_names<-vector()
for (i in time_points){
name<-lapply(strain_names,f_names_df_list,i)
df_list_names<-c(df_list_names, name)
}
names(df_list)<-df_list_names
descriptives_to_use<-descriptives[descriptive_sequence]
descriptives_labels<-label_list_smooth
smooth_dose_response<-f_smooth(descriptives_to_use, descriptives_labels,statistic_to_use,
legend_title_smooth, ncol_legend_smooth,
scale_x_labels_smooth,scale_x_labels_smooth,plot_title_smooth,
xlab_smooth, ylab_smooth,legend_direction_smooth,
legend_position_smooth,additional_arguments_smooth)
f_save(smooth_dose_response,paste("smooth_dose_response.jpeg",time_point_smooth,sep = "_"),
output_folder=output_path,output_path="",
height=height_smooth, width=width_smooth)
descriptives_to_use<-descriptives[descriptive_sequence]
descriptives<-c(lapply(df_list,f_descriptives,column=cols_descriptives))
#----------------------------------------------------------------------------------
# smoothed dose response
descriptives_to_use<-descriptives[descriptive_sequence]
descriptives_labels<-label_list_smooth
smooth_dose_response<-f_smooth(descriptives_to_use, descriptives_labels,statistic_to_use,
legend_title_smooth, ncol_legend_smooth,
scale_x_labels_smooth,scale_x_labels_smooth,plot_title_smooth,
xlab_smooth, ylab_smooth,legend_direction_smooth,
legend_position_smooth,additional_arguments_smooth)
f_save(smooth_dose_response,paste("smooth_dose_response.jpeg",time_point_smooth,sep = "_"),
output_folder=output_path,output_path="",
height=height_smooth, width=width_smooth)
size_plots<- lapply(df_list,f_size_plot,fsc_column=fscw_column_size,ssc_column=sscw_column_size,
xlab_title=xlab_size,ylab_title=ylab_size,xlims=xlimits_size,
ylims=ylimits_size)
name_list_size<- strain_names # should contain one name per strain that you want to
#create a grid for.
label_list_size<- label_list # should contain one label per grid, and the order of the labels must
#correspond to the order in which the strains appear in name_list.
names(label_list_size)<-name_list_size
# apply the grid function to create a new list with the grids, and name these using the name_list so
#that you can later save them using the names.
grid_plots_size<- lapply(name_list_size,f_sizeplots_grid,plot_list=size_plots,
legend_label=label_list_size,labels_for_grid=labels_for_grid_size)
names(grid_plots_size)<-name_list_size
mapply(f_save,grid_plots_size,names(grid_plots_size),
MoreArgs = list(output_folder=output_path,output_path="size",
height=height_size, width=width_size),SIMPLIFY = FALSE)
histograms<-mapply(f_geom_histogram,df_list[dfs_to_histogram],control_sequence,
MoreArgs = list(dose_column,
citrine_column,labels_histogram,
doses_histogram,size_histogram,breaks_histogram,
legend_title_histogram,legend_ncol_histogram,
legend_position_histogram,xlimits_histogram,
ylimits_histogram, df_list, label_list[c(3:5)]),
USE.NAMES = TRUE, SIMPLIFY = FALSE)
names(histograms)<-strain_names[dfs_to_histogram]
### making the grids
name_list_histogram<-strain_names[dfs_to_histogram] # should contain one name per strain that you want
#to create a grid for.
label_list_histogram<-label_list[dfs_to_histogram] # should contain one label per grid,
#and the order of the labels must correspond to the order in which the strains appear in name_list.
names(label_list_histogram)<-name_list_histogram
# apply the grid function to create a new list with the grids,
#and name these using the name_list so that you can later save them using the names.
grid_plots_histogram<- lapply(name_list_histogram,f_histogram_grid,plot_list=histograms,
legend_label=label_list_histogram, grid_labels=grid_labels_histograms)
names(grid_plots_histogram)<-name_list_histogram
## saving
mapply(f_save,grid_plots_histogram,names(grid_plots_histogram),
MoreArgs = list(output_folder=output_path,output_path="histograms",
height=height_histograms, width=width_histograms),SIMPLIFY = FALSE)
library("minpack.lm")
# pick which strains/time_points you want to plot, and their labels
frame_list<-descriptives[descriptives_to_use_sigmoid]
label_list_sigmoid<-label_list[labels_to_use]
#define x axis doses and the labels for plotting
doses_experiment<-frame_list[[1]][,8]
breaks_sigmoid<-c(0.1,doses_experiment[c(2:length(doses_experiment))])
labels_x_axis<-c(0,frame_list[[1]][c(2:nrow(frame_list[[1]])),8])
# replace 0 values in the doses with 0.1
for(i in c(1:length(frame_list))){
frame_list[[i]][1,8]<-0.1
}
# define the controls for putting on the plot
control_list<-descriptives[controls_to_use_sigmoid]
control_list_sigmoid<-label_list[controls_to_use_sigmoid]
# generate log distributed x values for smoother line fitting.
library(emdbook)
x_values<-c(0,lseq(min(frame_list[[1]][,8]),
max(frame_list[[1]][,8]),1000))
x_values_plotting<-c(min(frame_list[[1]][,8]),x_values[c(2:length(x_values))])
# apply the fitting to each frame with its own individual starting points.
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
ec_list_descriptives<-lapply(parameters,f_ecs)
# plot the fitted lines and the individual data points
sigmoid_plot<-f_plot_sigmoid_curves(sigmoid_fit_descriptives,frame_list, control_list,
control_list_sigmoid, ec_list_descriptives)
f_save(sigmoid_plot,paste("sigmoid_fit.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
list_of_starting_points<-list(
c(100000,0.8,20,1,300),
c(100000,0.8,20,1,300)
)
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
list_of_starting_points<-list(
c(100000,0.1,20,1,300),
c(100000,0.1,20,1,300)
)
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
list_of_starting_points<-list(
c(100000,0.1,20,10,300),
c(100000,0.1,20,10,300)
)
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
list_of_starting_points<-list(
c(100000,0.05,20,10,300),
c(100000,0.1,20,10,300)
)
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
list_of_starting_points<-list(
c(100000,0.05,20,10,300),
c(100000,0.05,20,10,300)
)
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
list_of_starting_points<-list(
c(100000,0.05,20,10,300),
c(100000,0.05,20,1,300)
)
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
list_of_starting_points<-list(
c(100000,0.05,20,10,300),
c(100000,0.01,20,10,300)
)
list_of_starting_points<-list(
c(100000,0.05,10,10,300),
c(100000,0.01,20,10,300)
)
parameters<-mapply(function_curve_fitting,frame_list,list_of_starting_points,
SIMPLIFY = FALSE)
sigmoid_fit_descriptives<-lapply(parameters,f_sigmoid_fit,x_values)
ec_list_descriptives<-lapply(parameters,f_ecs)
# plot the fitted lines and the individual data points
sigmoid_plot<-f_plot_sigmoid_curves(sigmoid_fit_descriptives,frame_list, control_list,
control_list_sigmoid, ec_list_descriptives)
f_save(sigmoid_plot,paste("sigmoid_fit.jpeg",time_point_sigmoid,sep = "_"),
output_folder=output_path,output_path="",
height=height_sigmoid, width=width_sigmoid)
sigmoid_plot<-f_plot_sigmoid_curves(sigmoid_fit_descriptives,frame_list, control_list,
control_list_sigmoid, ec_list_descriptives)
