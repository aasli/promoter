descriptives<-c(lapply(df_list,f_descriptives,column=cols_descriptives))
#----------------------------------------------------------------------------------
# getting a value for size
df_with_size<-lapply(df_list,f_size)
#----------------------------------------------------------------------------------
names(df_list)
label_list
label_list[c(2,3,4)]
label_list[c(2,3,4,8,10)]
getwd()
mapply("write.csv", descriptives[c(2,3,4,8,10)], paste(label_list[c(2,3,4,8,10)], ".csv", sep = ""), SIMPLIFY = F)
setwd("C:/repos/promoter/FACS data/paper figures/figure 3")
mapply("write.csv", descriptives[c(2,3,4,8,10)], paste(label_list[c(2,3,4,8,10)], ".csv", sep = ""), SIMPLIFY = F)
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
output_path<-"C:/Users/aslia/Desktop/pisi/ETH/master project/labbook/plots/dec18/181213_pma1_biolector" #where to save the plots
OFFSET<-TRUE # decide if you want to offset all curves by their minimum measured value, such that all curves start around 0.
name_experimental_strain<- "PMA1"
name_parent_strain<- "parent" # strain names as they will appear in the plot legend
biolector_data<-
as.data.frame(read.csv("181213_pma1.csv")) %>% # read in the biolector file, from which the rows where the experiment is described is removed (so the first row is the column names)
filter(FILTERSET == "2") %>% # filter for only one filterset (this is equal to the biomass30/45/60 on the biolector software)
select(WELLNUM,TIME..h.,AMPLITUDE) %>%  # select only the columns with wells, time, and amplitude
filter(WELLNUM != "") %>% # remove the reference measurements
droplevels() # drop the wellnumber level that was used for reference measurements
colnames(biolector_data)<-c("Wells","Time","Amplitude")
levels(biolector_data$Wells)<-c(1:48) # change the well numbers from "A01" format to numbers of 1 to 48. A01 = 1, A02 =2... B01=9 etc etc.
biolector_data$Wells<-as.numeric(biolector_data$Wells) # change the type of the well column from character to numeric
biolector_data_strain<-
biolector_data %>%
mutate(Strain = case_when( Wells %in% c(1:4,9:12,17:20,25:28,33:36,41:44) ~ name_experimental_strain,
Wells %in% c(5:8,13:16,21:24,29:32,37:40,45:48) ~ name_parent_strain)) %>%  # select groups of wells, and assign them a group name (for example which strain they are). this will be added to a new column called Strain
mutate(Dose = case_when( Wells %in% seq(1,21,4) ~ 0,
Wells %in% seq(2,22,4) ~ 5,
Wells %in% seq(3,23,4) ~ 12,
Wells %in% seq(4,24,4) ~ 20,
Wells %in% seq(25,45,4) ~ 3,
Wells %in% seq(26,46,4) ~ 8,
Wells %in% seq(27,47,4) ~ 15,
Wells %in% seq(28,48,4) ~ 600
))  # select groups of wells, assign aTc doses to them, which will be added to a new column called Dose
if(OFFSET==TRUE){
biolector_data_strain<-
group_by(biolector_data_strain, Wells) %>%
mutate(Amplitude = Amplitude-(min(Amplitude))) %>% # subtract the lowest measured value of each well from all measurements for that well, to move the lowest point of all curves to 0.
ungroup()
}
f_plot<-function(dataframe, xlims, ylims, colours){
plot<-ggplot(dataframe) +
geom_line(aes(x=Time,y=Amplitude, colour=as.factor(Dose), linetype=Strain, group=Wells), size=1) +
scale_color_manual(values=colours) +
xlab("Time (h)") +
ylab("Amplitude (a.u.)") +
guides(colour=guide_legend(title = "aTc [ng/mL]", title.position = "top",nrow=2),
linetype=guide_legend(title="")) +
xlim(xlims) +
ylim(ylims) +
theme(panel.grid.minor = element_blank(),
legend.position = c(0.2,0.8),
legend.direction = "horizontal",
legend.title = element_text(size=10),
legend.text = element_text(size=10),
legend.key.height = unit(0.35,"cm"),
legend.key = element_blank(),
legend.box.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
axis.title = element_text(hjust = 1),
panel.background = element_blank() )
return(plot)
}
colour_scale<-scales::seq_gradient_pal("yellow", "red", "Lab")(seq(0,1,length.out=8))
f_plot(biolector_data_strain,c(10,NA),c(0,NA), colour_scale)
ggsave("all_data.jpeg",path = output_path)
# for plotting only certain doses of each strain
doses_experiment_strain<-c(0,3,5,8,12,15,20,600)
doses_parent_strain<- c(0,600)
# for moving one strain along the x axis to overlay the exponential growth phases of all strains. to ignore differences in lag phase.
x_offset_experiment_strain<- 0
x_offset_parent_strain<- 0
biolector_data_selected<-
filter(biolector_data_strain, Strain == name_experimental_strain & Dose %in% doses_experiment_strain |
Strain == name_parent_strain & Dose %in% doses_parent_strain) %>% # filter for the doses you want
mutate(Time, Time = case_when (Strain == name_experimental_strain ~  Time + x_offset_experiment_strain,
Strain == name_parent_strain ~  Time + x_offset_parent_strain
)) # offset the different strains if you want on the time (x) axis.
colour_scale2<-scales::seq_gradient_pal("lightblue", "red", "Lab")(seq(0,1,length.out=8))
f_plot(biolector_data_selected, c(10,NA),c(0,NA),colour_scale2)
ggsave("selected_data.jpeg",path = output_path)
f_plot(biolector_data_selected, c(10,NA),c(0,NA),colour_scale2) + xlim(0,25)
f_plot(biolector_data_selected, c(10,NA),c(0,NA),colour_scale2) + xlim(0,35)
f_plot(biolector_data_selected, c(10,NA),c(0,NA),colour_scale2)
source("common_functions_media.R")
source("stat_functions.R")
source("plotting_functions.R")
t0p1_file<-"figure 4/ethanol_36h/" #180515
t1p1_file<-"figure 4/glycerol_48h/" #180515
t2p1_file<-"figure 4/180607_proline_43h/samples" #180504
t6p1_file<-"figure 4/sd_6h/" # 180518
t3p1_file<-"figure 4/ethanol_36h/controls" #180515
t4p1_file<-"figure 4/glycerol_48h/controls" #180515
t5p1_file<-"figure 4/proline_43h/controls"  #180504
t7p1_file<-"figure 4/sd_6h/controls" # 180518
pattern_read<-"Specimen_001"
output_path<-"C:/Users/aslia/Desktop/pisi/ETH/master project/labbook/paper/figures/figure4/drm_package"
# create folders named size, svf, histograms, boxplots under this directory.
starting_well<-1
wells_per_sample<-24
ypethanol_doses<-c(0,0.5,1,3,5,8,12,15,17,21,23,25,30,35,40,50,60,75,100,150,200,300,400,600)
glycerol_doses<-c(0,0.2,0.5,1,2,4,5,7,8,10,12,14,16,18,20,25,27,30,45,60,100,200,400,600)
proline_doses<-c(0,0.2,0.5,0.7,1,1.5,2,2.5,3,4,6,8,10,12,15,20,25,30,40,45,60,200,400,600)
sd_doses<- c(0,0.5,1,3,5,8,12,15,17,21,23,25,30,35,40,50,60,75,100,150,200,300,400,600)
experiment_doses<-list(ypethanol_doses,c(0,max(ypethanol_doses)),
c(0,max(ypethanol_doses)),c(0,max(ypethanol_doses)),
glycerol_doses, c(0,600),c(0,600),c(0,600),
proline_doses, c(0,600),c(0,600),c(0,600),
sd_doses,c(0,600),c(0,600),c(0,600))
columns_to_include<-c(2,5,3,6,7) #1=FSC-A, #2=FSC-H, #3=FSC-W, #4=SSC-A, #5=SSC-H, #6=SSC-W, #7= 488 [C]-H
strain_names<-c("2759eth","2661eth","2683eth","70eth",
"2759gly","2661gly","2683gly","70gly",
"2759pro","2661pro","2683pro","70pro",
"2759sd","2661sd","2683sd","70sd"
)
time_points<-c("24h")
label_list<- c("7op NF_eth",
"no repressor_eth",
"tdh3_eth",
"fry70_eth",
"7op NF_gly","tdh3_gly",
"fry70_gly",
"no repressor_gly",
"7op NF_pro",
"no repressor_pro",
"tdh3_pro",
"fry70_pro",
"7op NF_sd",
"no repressor_sd",
"tdh3_sd",
"fry70_sd"
)
names(label_list)<-strain_names
xlabel<-"aTc [ng/mL]"
#---------------------------------------------------------------------------------------------------------------
## pick the values to subset the data with.
columns <-c(3:6) #columns to be included in the subset
col_fscw <- 1 #column of FSC-W/H
col_sscw <- 2 #column of SSC-W/H
limit_fscw <-250000 #the value for subsetting based on FSC-W/H
limit_sscw <-250000 #the value for subsetting based on SSC-W/H
lower_limit_fscw <-10000 #the value for subsetting based on FSC-W/H, lower limit
lower_limit_sscw <-0000 #the value for subsetting based on SSC-W/H, lower limit
size_subset<-TRUE # set to TRUE if you want to use size_subsetted data, otherwise false.
#----------------------------------------------------------------------------------------------------------
## descriptive statistics
dose_descriptives<-experiment_doses
cols_descriptives<-3
# read fcs files
t0p1<-f_read(t0p1_file,pattern_read)
t1p1<-f_read(t1p1_file,pattern_read)
t2p1<-f_read(t2p1_file,pattern_read)
t3p1<-f_read(t3p1_file,pattern_read)
t4p1<-f_read(t4p1_file,pattern_read)
t5p1<-f_read(t5p1_file,pattern_read)
t6p1<-f_read(t6p1_file,pattern_read)
t7p1<-f_read(t7p1_file,pattern_read)
#----------------------------------------------------------------------------------
# create the list of dataframes that contain all the data
df_list<-c(f_df_list(t0p1,starting_well,wells_per_sample,ypethanol_doses,columns_to_include),
f_df_list(t3p1,starting_well,2,c(0,400),columns_to_include),
f_df_list(t1p1,starting_well,wells_per_sample,glycerol_doses,columns_to_include),
f_df_list(t4p1,starting_well,2,c(0,600),columns_to_include),
f_df_list(t2p1,starting_well,24,proline_doses,columns_to_include),
f_df_list(t5p1,starting_well,2,c(0,600),columns_to_include),
f_df_list(t6p1,starting_well,24,sd_doses,columns_to_include),
f_df_list(t7p1,starting_well,2,c(0,600),columns_to_include)
)
#----------------------------------------------------------------------------------
##create names for the dataframe list
df_list_names<-vector()
for (i in time_points){
name<-lapply(strain_names,f_names_df_list,i)
df_list_names<-c(df_list_names, name)
}
names(df_list)<-df_list_names
#----------------------------------------------------------------------------------
# size subsetting, if wanted
if(size_subset==TRUE){
size_subset_df<-lapply(df_list,f_size_subset,columns=columns,
col_fscw=col_fscw,col_sscw=col_sscw,limit_fscw=limit_fscw,
limit_sscw=limit_sscw, lower_limit_fscw=lower_limit_fscw,
lower_limit_sscw=lower_limit_sscw)
df_list<-size_subset_df
}
#----------------------------------------------------------------------------------
# descriptive stats
descriptives<-c(mapply(f_descriptives_media,df_list,experiment_doses,
MoreArgs = list(column=3),SIMPLIFY = F))
#----------------------------------------------------------------------------------
# getting a value for size
df_with_size<-lapply(df_list,f_size)
library(drc)
list_p1<-list(-0.8,-0.8,-0.8,-0.8)
list_p2<-list(3,3,3,3)
list_formulas<-list()
for(i in c(1:length(list_p1))){
formula<- fplogistic(p1=list_p1[[i]],p2=list_p2[[i]])
list_formulas[[i]]<-formula
}
#--------------------------------------------------------------------------------------------------
descriptives_to_use<-c(1,5,9,13)
control_descriptives_to_use<-c(2,3,4,6,7,8,10,11,12,14,15,16)
xlim<-c(0.19,200)
ylim<-c(0,50000)
dose_control<-c("400","400","200","200","200","200","400","400")
colour_palette<-c("#7a1f1f","#cb3434","#ff3333","#ffcccc")
# pick which strains/time_points you want to plot, and their labels
frame_list<-descriptives[descriptives_to_use]
label_list_sigmoid<-c("YPeth","SGly","SDpro","SDmin")
label_list_control<-c("ype_norepressor","ype_70",
"gly_norepressor","gly_70",
"pro_norepressor","pro_70",
"sd_norepressor","sd_70")
control_frame_error<-df_list[control_descriptives_to_use]
# pick your controls
control_frame_list<-descriptives[control_descriptives_to_use]
#define x axis doses and the labels for plotting
doses_experiment<-c(0,1,5,20,60,200,600)
labels_x_axis<- c("0","1","5","20","60","200","600")
# # replace 0 values in the doses with 0.1
for(i in c(1:length(frame_list))){
frame_list[[i]][1,8]<-0.19
}
strain_list<-label_list_sigmoid
new_frame_list<-list()
for(i in c(1:length(frame_list))){
new_frame<-frame_list[[i]][c(1,8)]
#new_frame[,2]<-log10(new_frame[,2])
new_frame_list[[i]]<-new_frame
} # creates the dataframes that the drm function can take as input (y values in first column, doses/x values in second column)
# generate log distributed x values for smoother line fitting.
library(emdbook)
x_values<-seq(min(new_frame_list[[1]][,2]),
600,length.out = 10000)
x_values_proline<-seq(min(new_frame_list[[1]][,2]),
600,length.out = 10000)
x_values_list<-list(x_values,x_values,x_values_proline,x_values)
# apply the drm function
lower_limits<-c(list(c(0,NA,0,NA),
c(0,NA,NA,NA),
c(NA,NA,10,NA),
c(0,NA,NA,NA)))
drm_model<-mapply(drm,data=new_frame_list,fct=list_formulas, lowerl=lower_limits,
MoreArgs = list(logDose=NULL) , SIMPLIFY = F) # the lower bound for the second
plot(drm_model[[1]], ylim=c(0,60000), xlim=c(0,600), log="x")
plot(drm_model[[2]], ylim=c(0,60000), xlim=c(0,600), log="x")
plot(drm_model[[3]], ylim=c(0,100000), xlim=c(0,600), log="x")
plot(drm_model[[4]], ylim=c(0,60000), xlim=c(0,600), log="x")
parameters<-list()
for(i in c(1:length(drm_model))){
parameter<-drm_model[[i]]$coefficients
parameters[[i]]<-c(parameter, list_p1[[i]], list_p2[[i]])
}
sigmoid_fit_descriptives<-mapply(f_sigmoid_fit,parameters, x_values_list, SIMPLIFY =F)
# creating the individual plots
library("minpack.lm")
library("ggthemes")
library("ggplot2")
## plotting the sigmoid curves.
xlabel<-expression(paste("aTc [ng/mL]"))
f_sigmoid <- function(params, x) {
b<-params[[1]]
c<-params[[2]]
d<-params[[3]]
e<-params[[4]]
p1<-params[[5]]
p2<-params[[6]]
(c + (d-c)/(1+ exp((b*(log(x+1))^p1)+(e*(log(x+1))^p2)))) #fplogistic
}
f_sigmoid_fit<-function(params,x_values){
print(params)
sigmoid_fit <- f_sigmoid(params,x_values)
return(sigmoid_fit)
}
f_plot_sigmoid_curves_overlaid<-
# plot the fitted line and the individual data points.
function(fit_list,frame_list, control_frame_list,label_list_control, xlim, ylim,control_doses){
formatter<-function(x){x/1000}
final_plot<-ggplot()
# plot the lines
for (i in c(1:length(fit_list))){
single_layer_line<- geom_line(aes_(x=x_values_list[[i]], y=fit_list[[i]],
colour=label_list_sigmoid[[i]]), size=1)
final_plot<-final_plot+single_layer_line
}
# plot the individual data points
for (j in c(1:length(frame_list))){
single_layer_point<- geom_point(aes_(x=frame_list[[j]][,8],y=frame_list[[j]][,1],
colour=label_list_sigmoid[[j]]))
final_plot<-final_plot+single_layer_point
}
# plot the controls
# for(k in c(1:length(control_frame_list))){
#   dose_control<-control_doses[[k]]
#   frame<-control_frame_list[[k]][which(control_frame_list[[k]][,8]==dose_control),]
#
#   single_layer_control<- geom_hline(aes_(yintercept=frame[,1],
#                                          linetype=label_list_control[[k]],colour=
#                                            label_list_sigmoid[[ceiling(k/2)]]))
#   ribbon_layer_control<- geom_ribbon(aes_(ymin=frame[,1]-(frame[,6]*frame[,1]),
#                                           ymax=frame[,1]-(frame[,6]*frame[,1]),
#                                           x=x_values))
#final_plot<-final_plot+single_layer_control
#}
pretty_plot<-final_plot +
scale_linetype_manual(values=c("longdash","dotdash",
"longdash","dotdash",
"longdash","dotdash",
"longdash","dotdash")) +
scale_colour_manual(values = colour_palette) +
scale_x_continuous(breaks = x_axis_breaks,
labels = x_axis_labels,
limits = xlim,
trans = "log10") +
scale_y_continuous(limits = ylim,  breaks=c(0,10000,20000,30000,40000,50000), labels=formatter) +
guides(colour=guide_legend(title = "Media",ncol=4)) +
# ggtitle(plot_title) +
xlab(xlabel) +
ylab(expression(paste("Fluorescence x","10"^"3","(a.u.)",sep="")))+
theme(panel.grid.minor = element_blank(),
legend.position = c(0.5,1),
legend.direction = "horizontal",
# legend.title = element_blank(),
legend.key.height = unit(0.35,"cm"),
legend.key = element_blank(),
legend.box.background = element_rect(linetype = "solid", colour="black"),
legend.margin = margin(t=0.04,r=0.1,b=0.1,l=0.1,unit="cm"),
panel.border = element_blank(),
axis.line = element_line(),
# axis.text = element_text(size=24),
# axis.title = element_text(size=24),
axis.title = element_text(hjust = 1),
panel.background = element_blank()
)
return(pretty_plot)
}
f_fit_function<-function(x) (c + (d-c)/(1+ exp((b*(log(x+1))^p1)+(e*(log(x+1))^p2)))) #fplogistic function
d_fit_function<-D(body(f_fit_function),'x')
f_d_sigmoid <- function(params, x) {
b<-params[[1]]
c<-params[[2]]
d<-params[[3]]
e<-params[[4]]
p1<-params[[5]]
p2<-params[[6]]
eval(D(body(f_fit_function),'x'))
}
f_d_sigmoid_fit<-function(params,x_values_d){
sigmoid_fit <- f_d_sigmoid(params,x_values_d)
return(sigmoid_fit)
}
f_plot_sigmoid_d<-function( y_values, label_list,ylims){
final_plot<- ggplot()
for(i in c(1:length(y_values))){
single_layer<-geom_line(aes_(x=x_values_d_list[[i]],y=y_values[[i]], colour=label_list[[i]]), size=1)
final_plot<-final_plot+single_layer
}
pretty_plot<-final_plot +
guides(colour=guide_legend(title = "")) +
ylab("Slope") +
scale_colour_manual(values = colour_palette) +
xlab(xlabel) +
scale_x_continuous(breaks = breaks_x_axis_d,
labels = labels_x_axis_d,
limits = c(0.19,200),
trans = "log10") +
scale_y_continuous(limits=ylims, breaks = c(0,1500,3000,4500))+
theme(panel.grid.minor = element_blank(),
legend.direction = "horizontal",
legend.position = "none",
panel.border = element_blank(),
axis.line = element_line(),
# axis.text = element_text(size=24),
# axis.title = element_text(size=24),
axis.title = element_text(hjust = 1 ),
panel.background = element_blank()
)
return(pretty_plot)
}
f_sigmoid_spearman <- function(params, x) {
b<-params[[1]]
c<-params[[2]]
d<-params[[3]]
e<-params[[4]]
f<-params[[5]]
a<-params[[6]]
c + (d-c + f*exp(-1/(x^{a})))/(1+exp(b*(log(x)-log(e))))
#c*d - (d-c + f*exp(-1/x^{a}))/(1+exp(b*(log(x)-log(e)))) # for varying alpha
}
f_sigmoid_fit_spearman<-function(params,x_values){
# takes the parameters for the best fit, any number of x values, and returns a list of y values
# for plotting.
sigmoid_fit <- f_sigmoid_spearman(params,x_values)
print(params)
return(sigmoid_fit)
}
# plotting spearman correlation between size and fluorescence.
#########
f_spearman_fit_plot<-function(fit,label,data){
final_plot<-ggplot()
for(i in c(1:length(fit))){
single_layer<-geom_line(aes_(x=x_values_spearman_list[[i]],y=fit[[i]], colour=label[[i]]))
data_layer<-geom_point(aes_(x=data[[i]][,2], y=data[[i]][,1], colour=label[[i]]))
final_plot<-final_plot+single_layer
final_plot<-final_plot+data_layer
}
pretty_plot<- final_plot +
ylab("Spearman Correlation") +
scale_colour_manual(values = colour_palette) +
scale_linetype_manual(values=c("longdash", "dotdash")) +
xlab(xlabel) +
scale_x_continuous(breaks = c(0.19,1,10,50,200),
labels =  c(0,1,10,50,200),
limits = xlim_spearman,
trans = "log10") +
scale_y_continuous(limits=c(0.40,0.85), breaks = c(0.4,0.5,0.6,0.7,0.8,0.9)) +
theme(panel.grid.minor = element_blank(),
legend.direction = "horizontal", legend.position = "none",
panel.border = element_blank(),
axis.line = element_line(),
# axis.text = element_text(size=24),
# axis.title = element_text(size=24),
axis.title = element_text(hjust = 1 ),
panel.background = element_blank()
)
return(pretty_plot)
}
sigmoid_fit_descriptives<-mapply(f_sigmoid_fit,parameters, x_values_list, SIMPLIFY =F)
x_axis_breaks<-c(0.19,1,10,50,200)
x_axis_labels<-c(0,1,10,50,200)
sigmoid_plot<-f_plot_sigmoid_curves_overlaid(sigmoid_fit_descriptives,frame_list, control_frame_list,
label_list_control, xlim, ylim, dose_control) +
theme(legend.position = "none")
sigmoid_plot
num<-9 # the controller strain in the df_list
num3<-11 # the pTDH3_citrine strain in the df_list
df1<-df_with_size[[num]][which(df_with_size[[num]][,4]==20),] # filter for full induction
df2<-df_with_size[[num3]][which(df_with_size[[num3]][,4]==600),] # filter for the ones with aTc
ggplot() +
geom_freqpoly(aes(x=df2[,3], colour="pTDH3_citrine"), size=1) +
geom_freqpoly(aes(x=df1[,3], colour="controller_induced(proline)"),size=1) +
#geom_histogram(aes(x=df3[,3], fill="ptdh3_citrine_0"),alpha=0.6,binwidth = 100) +
scale_y_continuous(limit=c(0,0.00003), breaks=c(0,0.00001,0.00002,0.00003),labels = c(0,1,2,3)) +
xlim(0,100000) +
theme_bw() +
guides(colour=guide_legend(title="", nrow=1)) +
theme(panel.grid = element_blank(),
legend.direction = "horizontal",
panel.border = element_blank(),
axis.line = element_line(),
legend.text = element_text(size=6),
# axis.text = element_text(size=24),
# axis.title = element_text(size=24),
axis.title = element_text(hjust = 1 ),
panel.background = element_blank(),
legend.position = c(0.5,0.95)
)+
xlab("Fluorescence (a.u.)") +
ylab(expression(paste("Density x ", 10^-5, sep="")))
ggplot() +
geom_freqpoly(aes(x=df2[,3], colour="pTDH3_citrine"), size=1) +
geom_freqpoly(aes(x=df1[,3], colour="controller_induced(proline)"),size=1) +
#geom_histogram(aes(x=df3[,3], fill="ptdh3_citrine_0"),alpha=0.6,binwidth = 100) +
scale_y_continuous(limit=c(0,NA), breaks=c(0,0.00001,0.00002,0.00003),labels = c(0,1,2,3)) +
xlim(0,NA) +
theme_bw() +
guides(colour=guide_legend(title="", nrow=1)) +
theme(panel.grid = element_blank(),
legend.direction = "horizontal",
panel.border = element_blank(),
axis.line = element_line(),
legend.text = element_text(size=6),
# axis.text = element_text(size=24),
# axis.title = element_text(size=24),
axis.title = element_text(hjust = 1 ),
panel.background = element_blank(),
legend.position = c(0.5,0.95)
)+
xlab("Fluorescence (a.u.)") +
ylab(expression(paste("Density x ", 10^-5, sep="")))
ggplot() +
geom_freqpoly(aes(x=df2[,3], colour="pTDH3_citrine"), size=1) +
geom_freqpoly(aes(x=df1[,3], colour="controller_induced(proline)"),size=1) +
#geom_histogram(aes(x=df3[,3], fill="ptdh3_citrine_0"),alpha=0.6,binwidth = 100) +
scale_y_continuous(limit=c(0,NA), breaks=c(0,0.00001,0.00002,0.00003),labels = c(0,1,2,3)) +
xlim(0,150000) +
theme_bw() +
guides(colour=guide_legend(title="", nrow=1)) +
theme(panel.grid = element_blank(),
legend.direction = "horizontal",
panel.border = element_blank(),
axis.line = element_line(),
legend.text = element_text(size=6),
# axis.text = element_text(size=24),
# axis.title = element_text(size=24),
axis.title = element_text(hjust = 1 ),
panel.background = element_blank(),
legend.position = c(0.5,0.95)
)+
xlab("Fluorescence (a.u.)") +
ylab(expression(paste("Density x ", 10^-5, sep="")))
